"""
Testes m√≠nimos para AWS Config.
Validar configura√ß√£o b√°sica.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from config.aws_config import AWSConfig


def test_aws_config_initialization():
    """Teste b√°sico: inicializa√ß√£o da configura√ß√£o."""
    config = AWSConfig()
    
    # Verificar campos b√°sicos
    assert config.region is not None
    assert config.input_bucket is not None
    assert config.output_bucket is not None
    assert config.client_config is not None
    
    # Verificar tipo de ambiente
    env = config.get_environment()
    assert env in ['localstack', 'aws']
    
    print("‚úÖ AWSConfig - Teste inicializa√ß√£o passou!")


def test_aws_config_clients():
    """Teste: cria√ß√£o de clientes AWS."""
    config = AWSConfig()
    
    # Tentar criar clientes (n√£o precisa conectar)
    try:
        s3_client = config.get_s3_client()
        sns_client = config.get_sns_client()
        sqs_client = config.get_sqs_client()
        
        # Verificar se s√£o objetos v√°lidos
        assert s3_client is not None
        assert sns_client is not None
        assert sqs_client is not None
        
        print("‚úÖ AWSConfig - Teste clientes passou!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è AWSConfig - Clientes criados mas podem n√£o conectar: {e}")


def test_aws_config_localstack_detection():
    """Teste: detec√ß√£o do LocalStack."""
    config = AWSConfig()
    
    # Verificar detec√ß√£o do LocalStack
    is_localstack = config.is_localstack()
    assert isinstance(is_localstack, bool)
    
    # Se endpoint_url est√° definido, deve ser LocalStack
    if config.endpoint_url:
        assert is_localstack == True
    
    print("‚úÖ AWSConfig - Teste detec√ß√£o LocalStack passou!")


if __name__ == "__main__":
    test_aws_config_initialization()
    test_aws_config_clients()
    test_aws_config_localstack_detection()
    print("\nüéâ Todos os testes do AWSConfig passaram!")