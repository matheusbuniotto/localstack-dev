#!/bin/bash

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${CYAN}üõ†Ô∏è  LocalStack - Ferramentas de Desenvolvimento${NC}"
echo "=================================================="

# Carregando vari√°veis de ambiente
if [ -f .env-dev ]; then
    source .env-dev
else
    echo -e "${RED}‚ùå Arquivo .env-dev n√£o encontrado${NC}"
    exit 1
fi

# Verificar se LocalStack est√° rodando
if ! docker ps | grep -q localstack-main; then
    echo -e "${RED}‚ùå LocalStack n√£o est√° rodando${NC}"
    echo -e "${YELLOW}üí° Execute: ./start.sh${NC}"
    exit 1
fi

# Fun√ß√£o para mostrar menu
show_menu() {
    echo -e "\n${BLUE}üìã Menu de Op√ß√µes:${NC}"
    echo "1. üì§ Enviar mensagem de teste para SNS"
    echo "2. üìã Listar mensagens nas filas SQS"
    echo "3. üì¶ Listar arquivos nos buckets S3"
    echo "4. üîç Visualizar mensagens SQS em tempo real"
    echo "5. üßπ Limpar todas as filas SQS"
    echo "6. üìä Status r√°pido dos servi√ßos"
    echo "7. üîê Visualizar secrets"
    echo "8. üö™ Sair"
    echo -n -e "${CYAN}Escolha uma op√ß√£o (1-8): ${NC}"
}

# Fun√ß√£o para enviar mensagem de teste
send_test_message() {
    echo -e "\n${BLUE}üì§ Enviar Mensagem de Teste${NC}"
    echo "T√≥picos dispon√≠veis:"
    echo "1. input-topic (simula entrada)"
    echo "2. output-topic (simula sa√≠da de processamento)"
    echo -n "Escolha o t√≥pico (1-2): "
    read topic_choice
    
    case $topic_choice in
        1)
            topic_name="input-topic"
            message="Mensagem de teste de entrada - $(date)"
            ;;
        2)
            topic_name="output-topic"
            message="Mensagem de teste de sa√≠da - $(date)"
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o inv√°lida${NC}"
            return 1
            ;;
    esac
    
    echo -n "Mensagem personalizada? (deixe vazio para usar padr√£o): "
    read custom_message
    
    if [ -n "$custom_message" ]; then
        message="$custom_message"
    fi
    
    topic_arn=$(aws sns list-topics --endpoint-url=$AWS_ENDPOINT_URL --query "Topics[?contains(TopicArn, '$topic_name')].TopicArn" --output text)
    
    if [ -n "$topic_arn" ]; then
        message_id=$(aws sns publish --topic-arn "$topic_arn" --message "$message" --endpoint-url=$AWS_ENDPOINT_URL --query 'MessageId' --output text)
        echo -e "${GREEN}‚úÖ Mensagem enviada com sucesso!${NC}"
        echo -e "${BLUE}üìã ID da mensagem: $message_id${NC}"
        echo -e "${BLUE}üìã T√≥pico: $topic_name${NC}"
    else
        echo -e "${RED}‚ùå T√≥pico n√£o encontrado${NC}"
    fi
}

# Fun√ß√£o para listar mensagens SQS
list_sqs_messages() {
    echo -e "\n${BLUE}üìã Mensagens nas Filas SQS${NC}"
    
    queues=("input-queue" "output-queue")
    
    for queue in "${queues[@]}"; do
        echo -e "\n${PURPLE}üìã Fila: $queue${NC}"
        queue_url="http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/$queue"
        
        # Verificar se h√° mensagens
        messages=$(aws sqs receive-message --queue-url "$queue_url" --endpoint-url=$AWS_ENDPOINT_URL --max-number-of-messages 10 2>/dev/null)
        
        if echo "$messages" | grep -q "Messages"; then
            count=$(echo "$messages" | jq '.Messages | length' 2>/dev/null || echo "N/A")
            echo -e "${GREEN}‚úÖ $count mensagem(ns) encontrada(s)${NC}"
            
            # Mostrar preview das mensagens
            echo "$messages" | jq -r '.Messages[] | "üì© ID: " + .MessageId + "\nüìù Resumo: " + (.Body | fromjson | .Message // .Body)[0:100] + "..."' 2>/dev/null || echo "üìù Mensagens encontradas mas n√£o foi poss√≠vel parsear"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Nenhuma mensagem na fila${NC}"
        fi
    done
}

# Fun√ß√£o para listar arquivos S3
list_s3_files() {
    echo -e "\n${BLUE}üì¶ Arquivos nos Buckets S3${NC}"
    
    buckets=("input-bucket" "output-bucket")
    
    for bucket in "${buckets[@]}"; do
        echo -e "\n${PURPLE}üì¶ Bucket: $bucket${NC}"
        
        files=$(aws s3 ls s3://$bucket/ --endpoint-url=$AWS_ENDPOINT_URL 2>/dev/null)
        
        if [ -n "$files" ]; then
            echo -e "${GREEN}‚úÖ Arquivos encontrados:${NC}"
            echo "$files" | while read -r line; do
                echo -e "${BLUE}üìÑ $line${NC}"
            done
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Bucket vazio${NC}"
        fi
    done
}

# Fun√ß√£o para visualizar mensagens em tempo real
watch_sqs_messages() {
    echo -e "\n${BLUE}üîç Monitoramento SQS em Tempo Real${NC}"
    echo "Pressione Ctrl+C para parar"
    
    while true; do
        clear
        echo -e "${CYAN}üîç Monitoramento SQS - $(date)${NC}"
        echo "=================================="
        
        queues=("input-queue" "output-queue")
        
        for queue in "${queues[@]}"; do
            echo -e "\n${PURPLE}üìã $queue${NC}"
            queue_url="http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/$queue"
            
            # Pegar at√© 3 mensagens
            messages=$(aws sqs receive-message --queue-url "$queue_url" --endpoint-url=$AWS_ENDPOINT_URL --max-number-of-messages 3 2>/dev/null)
            
            if echo "$messages" | grep -q "Messages"; then
                echo "$messages" | jq -r '.Messages[] | "üïí " + (.Body | fromjson | .Timestamp // "N/A") + "\nüìù " + (.Body | fromjson | .Message // .Body)[0:80] + "...\n"' 2>/dev/null || echo "üìù Mensagens encontradas"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Nenhuma mensagem${NC}"
            fi
        done
        
        sleep 5
    done
}

# Fun√ß√£o para limpar filas
clear_queues() {
    echo -e "\n${BLUE}üßπ Limpando Filas SQS${NC}"
    
    echo -e "${YELLOW}‚ö†Ô∏è  Isso remover√° todas as mensagens das filas${NC}"
    echo -n "Continuar? (s/N): "
    read confirm
    
    if [[ $confirm =~ ^[Ss]$ ]]; then
        queues=("input-queue" "output-queue")
        
        for queue in "${queues[@]}"; do
            echo -n "üßπ Limpando $queue... "
            queue_url="http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/$queue"
            
            if aws sqs purge-queue --queue-url "$queue_url" --endpoint-url=$AWS_ENDPOINT_URL &>/dev/null; then
                echo -e "${GREEN}‚úÖ Limpa${NC}"
            else
                echo -e "${RED}‚ùå Erro${NC}"
            fi
        done
    else
        echo -e "${BLUE}‚ÑπÔ∏è  Opera√ß√£o cancelada${NC}"
    fi
}

# Fun√ß√£o para status r√°pido
quick_status() {
    echo -e "\n${BLUE}üìä Status R√°pido dos Servi√ßos${NC}"
    
    # S3
    echo -n "üì¶ S3 Buckets: "
    bucket_count=$(aws s3 ls --endpoint-url=$AWS_ENDPOINT_URL 2>/dev/null | wc -l)
    echo -e "${GREEN}$bucket_count buckets${NC}"
    
    # SNS
    echo -n "üì¢ SNS Topics: "
    topic_count=$(aws sns list-topics --endpoint-url=$AWS_ENDPOINT_URL --query 'Topics' --output text 2>/dev/null | wc -l)
    echo -e "${GREEN}$topic_count topics${NC}"
    
    # SQS
    echo -n "üìã SQS Queues: "
    queue_count=$(aws sqs list-queues --endpoint-url=$AWS_ENDPOINT_URL --query 'QueueUrls' --output text 2>/dev/null | wc -w)
    echo -e "${GREEN}$queue_count queues${NC}"
    
    # Secrets
    echo -n "üîê Secrets: "
    secret_count=$(aws secretsmanager list-secrets --endpoint-url=$AWS_ENDPOINT_URL --query 'SecretList' --output text 2>/dev/null | wc -l)
    echo -e "${GREEN}$secret_count secrets${NC}"
}

# Fun√ß√£o para visualizar secrets
view_secrets() {
    echo -e "\n${BLUE}üîê Secrets Manager${NC}"
    
    secrets=$(aws secretsmanager list-secrets --endpoint-url=$AWS_ENDPOINT_URL --query 'SecretList[].Name' --output text 2>/dev/null)
    
    if [ -n "$secrets" ]; then
        echo -e "${GREEN}‚úÖ Secrets encontrados:${NC}"
        for secret in $secrets; do
            echo -e "\n${PURPLE}üîë $secret${NC}"
            value=$(aws secretsmanager get-secret-value --secret-id "$secret" --endpoint-url=$AWS_ENDPOINT_URL --query 'SecretString' --output text 2>/dev/null)
            echo -e "${BLUE}üìù Valor: $value${NC}"
        done
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhum secret encontrado${NC}"
    fi
}

# Loop principal
while true; do
    show_menu
    read choice
    
    case $choice in
        1) send_test_message ;;
        2) list_sqs_messages ;;
        3) list_s3_files ;;
        4) watch_sqs_messages ;;
        5) clear_queues ;;
        6) quick_status ;;
        7) view_secrets ;;
        8) 
            echo -e "${GREEN}üëã At√© logo!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o inv√°lida. Tente novamente.${NC}"
            ;;
    esac
    
    echo -e "\n${BLUE}Pressione Enter para continuar...${NC}"
    read
done